$(document).ready(main);

function displayProgress(event){
	document.getElementById('progress').innerHTML = "Progress: " + 100*event.recognized + "%";
}

function display(textToDisplay) {
	document.getElementById('display').innerHTML += textToDisplay.text + "<br>";
}
function runOCR(img, ocrAPI){
	var outputMaybe = ocrAPI
		.recognize(img, {
			progress: displayProgress,
			lang: 'eng'
		})
	  	.then(display);
}

// methods of viewBox
function main(){

var app = (function(){

	// view variables
	var viewImgInput = document.getElementById('img-input');
	var viewUploadedImg = document.getElementById('uploaded-img');
	var $viewUploadedImg = $('#uploaded-img');
	viewUploadedImg.context = viewUploadedImg.getContext('2d');
	var viewTestArea = document.getElementById('test-area');
	viewTestArea.context = viewTestArea.getContext('2d');
	var $viewBox = $('#box-select');

	// model variables
	var modelImage = new Image();	
	var modelBox = {
		X: 0,
		y: 0,
		w: 0,
		h: 0
	}

	// view methods
	var _view = {

		removeBox: function(){
			$viewBox.width(0).height(0);
			$viewBox.removeClass('box-active');
		},
		renderBox: function(left, top, w, h){
		    $viewBox.css({
		    	'left': left,
		        'top': top,
		        'width': w,
		        'height': h
		    });
		    $viewBox.addClass('box-active');
		},
		getMousePos: function(e){
			var $viewUploadedImgParent = $viewUploadedImg.parent();
			var offset = $viewUploadedImgParent.offset();
			var x = e.pageX - offset.left + $viewUploadedImgParent.scrollLeft();
			var y = e.pageY - offset.top + $viewUploadedImgParent.scrollTop();
			return [x, y];
		},
		renderTestArea: function(imageObj, left, top, w, h){	
			// set up testArea.canvas dimensions and draw the image
			var left = left;
			var top = top;
			var clipW = Math.max(1, Math.floor(w));
			var clipH = Math.max(1, Math.floor(h));
			// var clipW = Math.max(1, Math.floor(w));
			// var clipH = Math.max(1, Math.floor(h));

			var x = 0;
			var y = 0;
			viewTestArea.context.clearRect(0, 0, viewTestArea.width, viewTestArea.height);
			viewTestArea.width = clipW;
			viewTestArea.height = clipH;
			viewTestArea.context.drawImage(imageObj, left, top, clipW, clipH, x, y, clipW, clipH);
		},
		renderUploadedPDF: function(page, scale){
			var viewport = page.getViewport(scale);
			var renderContext = {
			  canvasContext: $viewUploadedImg.context,
			  viewport: viewport
			}
			viewUploadedImg.context.clearRect(0, 0, viewport.width, viewport.height);
			viewUploadedImg.width = viewport.width;
			viewUploadedImg.height = viewport.height;

			return page.render(renderContext).promise;
		},
		renderUploadedImg: function(imageObj, w, h){
			viewUploadedImg.context.clearRect(0, 0, w, h);
			viewUploadedImg.width = w;
			viewUploadedImg.height = h;
			viewUploadedImg.context.drawImage(imageObj, 0, 0, w, h);	

		}
	}

	// model methods
	var _model = {
		initBox: function(x, y){
			modelBox.x = x;
			modelBox.y = y;			
		},
		getSize: function(x, y){
			// get width and length of box
			modelBox.mouseX = x;
			modelBox.mouseY = y;
			modelBox.w = Math.abs(modelBox.x - x);
		    modelBox.h = Math.abs(modelBox.y - y);
		},
		determineFlip: function(){
			var x = modelBox.x;
			var y = modelBox.y;
			// console.log(this);
			var mouseX = modelBox.mouseX;
			var mouseY = modelBox.mouseY;
			var left = 0;
			var top = 0;
		    if(mouseX <= x && mouseY >= y){
		    	// lower-left quad of init point
		    	left = mouseX;
		    	top = y;
		    } else if (mouseY <= y && mouseX >= x) {
		    	// upper-right quad of init point
		    	left = x;
		    	top = mouseY;
		    } else if (mouseY < y && mouseX < x) {
		    	// upper-left quad of init point
		    	left = mouseX;
		    	top = mouseY;
		    } else{
		    	// lower-right quad of init point
		    	left = x;
		    	top = y;
		    }
		    modelBox.left = left;
		    modelBox.top = top;
		},
		updateImageSrc: function(URL){
			modelImage.src = URL;
			console.log(modelImage);
		}
	}

	var _controller = {
		init: function(){

			var self = this;
			$viewUploadedImg.on('dragstart', function(e) { e.preventDefault(); });
			this.initBoxOnMouseDown = this.initBoxOnMouseDown.bind(self);
			this.drawBoxOnMouseMove = this.drawBoxOnMouseMove.bind(self);
			this.captureAreaOnMouseUp = this.captureAreaOnMouseUp.bind(self);

			viewImgInput.onchange = function(e){
				self.getInputImgPDF.call(self, this);
			}


		},
		getInputImgPDF: function(el){
			var self = this;
			$viewUploadedImg.off('mousedown', self.initBoxOnMouseDown);

			var fileTypesIMG = ['jpg', 'jpeg', 'png'];
			var fileTypesPDF = ['pdf']; 
			var inputExtension = el.files[0].name.split('.').pop().toLowerCase(),
				isPDF = fileTypesPDF.indexOf(inputExtension) > -1,
				isIMG = fileTypesIMG.indexOf(inputExtension) > -1;
			if (isPDF){
			        var tmpPath = URL.createObjectURL(el.files[0]);
					PDFJS.getDocument(tmpPath).then(function(pdf){
	  					pdf.getPage(1).then(function(page){

	  						var scale = 1;
							_view.renderUploadedPDF(page, scale).then(function(){
								var aDataURL = $viewUploadedImg.toDataURL("image/jpeg", 1.0);
								_model.updateImageSrc(aDataURL);
								modelImage.onload = function(){
									// console.log('ran load');

									$viewUploadedImg.on('mousedown', self.initBoxOnMouseDown);
								}
							});
	  					});
					});
			}else if(isIMG){
				// change src of uploaded img
			    var reader = new FileReader();
		    	reader.onload = function (e) {
					_model.updateImageSrc(e.target.result);
					_view.renderUploadedImg(modelImage, modelImage.width, modelImage.height);

			        // attach listener to create a box whenever the upload-img is clicked on
			        $viewUploadedImg.on('mousedown', self.initBoxOnMouseDown);

			    };

			    // read image file as data URL
		        reader.readAsDataURL(el.files[0]);		
			}else{
				// console log error
				console.log('error! invalid file type');
			}
		},
		initBoxOnMouseDown: function(e){
			var self = this;
			// unbind mousedown?
			var xy = _view.getMousePos(e);
			_view.removeBox();
			_model.initBox(xy[0], xy[1]);
			$(document).on('mousemove', self.drawBoxOnMouseMove);
		},
		drawBoxOnMouseMove: function(e){
			var self = this;
			var xy = _view.getMousePos(e);
			_model.getSize(xy[0], xy[1]);
			_model.determineFlip();
			// console.log(modelBox.left);
			var left = modelBox.left;
			var top = modelBox.top;
			var w = modelBox.w;
			var h = modelBox.h;
			_view.renderBox(left, top, w, h);
			// _view.renderBox();
			$(document).on("mouseup", self.captureAreaOnMouseUp);
		},
		captureAreaOnMouseUp: function(e){
			var self = this;
			$(document).off('mousemove', self.drawBoxOnMouseMove);
			$(document).off('mouseup', self.captureAreaOnMouseUp);

				// if(this.mouseX < this.x){
				// 	var clipX = this.mouseX;
				// }else{
				// 	var clipX = this.x;
				// }
				// if(this.mouseY < this.y){
				// 	var clipY = this.mouseY;
				// }else{
				// 	var clipY = this.y;
				// }

				var left = modelBox.left;
				var top = modelBox.top;
				var w = modelBox.w;
				var h = modelBox.h;
				// _view.removeBox();
				console.log('removed');
				_view.renderTestArea(modelImage, left, top, w, h);

				// prepare testArea.canvas's drawn image for OCR API 
				var img = new Image();
				img.src = viewTestArea.toDataURL("image/jpeg", 1.0);
				// image must load first before running OCR!
				img.onload = function(){
					runOCR(this, Tesseract);
				
				}
		}

	}

	// to make public
	var _public = {
		view: _view,
		model: _model,
		controller: _controller
	}
	return _public;

})();

    app.controller.init();
	console.log('ran main');

}
